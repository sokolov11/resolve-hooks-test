{"version":3,"sources":["../src/send_command_saga.js"],"names":["CONCURRENT_ERROR_RETRY_COUNT","CONCURRENT_ERROR_CODE","sendCommandSaga","api","commandType","aggregateId","aggregateName","payload","event","lastError","index","sendCommand","HttpError","code"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AAMA,IAAMA,4BAA4B,GAAG,CAArC;AACA,IAAMC,qBAAqB,GAAG,GAA9B;;AAEA,IAAMC,eAAe;AAAA;AAAA,6BAAG,SAAlBA,eAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,UAAAA,GADoB,QACpBA,GADoB;AAEpBC,UAAAA,WAFoB,SAEpBA,WAFoB,EAEPC,WAFO,SAEPA,WAFO,EAEMC,aAFN,SAEMA,aAFN,EAEqBC,OAFrB,SAEqBA,OAFrB;AAIlBC,UAAAA,KAJkB,GAIV,IAJU;AAKlBC,UAAAA,SALkB,GAKN,IALM;AAAA;AAOXC,UAAAA,KAPW,GAOH,CAPG;;AAAA;AAAA,gBAOAA,KAAK,GAAGV,4BAPR;AAAA;AAAA;AAAA;;AAAA;AAAA;AASR,iBAAMG,GAAG,CAACQ,WAAJ,CAAgB;AAC5BP,YAAAA,WAAW,EAAXA,WAD4B;AAE5BC,YAAAA,WAAW,EAAXA,WAF4B;AAG5BC,YAAAA,aAAa,EAAbA,aAH4B;AAI5BC,YAAAA,OAAO,EAAPA;AAJ4B,WAAhB,CAAN;;AATQ;AAShBC,UAAAA,KATgB;AAgBhBC,UAAAA,SAAS,GAAG,IAAZ;AAhBgB;;AAAA;AAAA;AAAA;AAmBhBA,UAAAA,SAAS,cAAT;;AAnBgB,gBAsBd,uBAAiBG,qBAAjB,IACA,YAAMC,IAAN,KAAeZ,qBAvBD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAOsCS,UAAAA,KAAK,EAP3C;AAAA;AAAA;;AAAA;AAAA,gBAgChBD,SAAS,IAAI,IAhCG;AAAA;AAAA;AAAA;;AAAA,gBAiCZA,SAjCY;;AAAA;AAAA;AAoCpB,iBAAM,kBACJ,iCAAmBL,WAAnB,EAAgCC,WAAhC,EAA6CC,aAA7C,EAA4DC,OAA5D,CADI,CAAN;;AApCoB;AAAA;AAwCpB,iBAAM,kBAAI,mCAAqBC,KAArB,CAAJ,CAAN;;AAxCoB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA0CpB,iBAAM,kBACJ,iCACEJ,WADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,OAJF,cADI,CAAN;;AA1CoB;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlBL,eAAkB;AAAA,CAAH,CAArB;;eAsDeA,e","sourcesContent":["import { put } from 'redux-saga/effects'\n\nimport { HttpError } from './create_api'\nimport {\n  sendCommandSuccess,\n  sendCommandFailure,\n  dispatchTopicMessage\n} from './actions'\n\nconst CONCURRENT_ERROR_RETRY_COUNT = 3\nconst CONCURRENT_ERROR_CODE = 408\n\nconst sendCommandSaga = function*(\n  { api },\n  { commandType, aggregateId, aggregateName, payload }\n) {\n  let event = null\n  let lastError = null\n  try {\n    for (let index = 0; index < CONCURRENT_ERROR_RETRY_COUNT; index++) {\n      try {\n        event = yield api.sendCommand({\n          commandType,\n          aggregateId,\n          aggregateName,\n          payload\n        })\n\n        lastError = null\n        break\n      } catch (error) {\n        lastError = error\n\n        if (\n          error instanceof HttpError &&\n          error.code === CONCURRENT_ERROR_CODE\n        ) {\n          continue\n        } else {\n          break\n        }\n      }\n    }\n\n    if (lastError != null) {\n      throw lastError\n    }\n\n    yield put(\n      sendCommandSuccess(commandType, aggregateId, aggregateName, payload)\n    )\n\n    yield put(dispatchTopicMessage(event))\n  } catch (error) {\n    yield put(\n      sendCommandFailure(\n        commandType,\n        aggregateId,\n        aggregateName,\n        payload,\n        error\n      )\n    )\n  }\n}\n\nexport default sendCommandSaga\n"],"file":"send_command_saga.js"}