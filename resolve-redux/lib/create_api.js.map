{"version":3,"sources":["../src/create_api.js"],"names":["ApiError","error","key","hasOwnProperty","Error","FetchError","name","HttpError","temporaryErrorHttpCodes","doFetch","fetch","err","unfetch","validateStatus","response","find","code","status","text","message","createApi","origin","rootPath","jwtProvider","store","request","url","body","rootBasedUrl","options","method","headers","credentials","JSON","stringify","get","jwtToken","Authorization","responseJwtToken","set","console","loadViewModelState","viewModelName","aggregateIds","aggregateArgs","queryAggregateIds","join","ok","result","timestamp","Number","Date","loadReadModelState","readModelName","resolverName","resolverArgs","sendCommand","commandType","aggregateId","aggregateName","payload","type","json","getSubscribeAdapterOptions","adapterName"],"mappings":"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","sourcesContent":["import unfetch from 'unfetch'\n\nimport getRootBasedUrl from './get_root_based_url'\nimport syncJwtProviderWithStore from './sync_jwt_provider_with_store'\n\nexport class ApiError extends Error {\n  constructor(error) {\n    super()\n    for (let key in error) {\n      if (!error.hasOwnProperty(key)) {\n        continue\n      }\n      this[key] = error[key]\n    }\n  }\n}\n\nexport class FetchError extends ApiError {\n  constructor(error) {\n    super(error)\n    this.name = 'FetchError'\n  }\n}\n\nexport class HttpError extends ApiError {\n  constructor(error) {\n    super(error)\n    this.name = 'HttpError'\n  }\n}\n\nexport const temporaryErrorHttpCodes = [\n  408, // Request Timeout\n  429, // Too Many Requests\n  502, // Bad Gateway\n  503, // Service Unavailable\n  504, // Gateway Timeout\n  507, // Insufficient Storage\n  509, // Bandwidth Limit Exceeded\n  521, // Web Server Is Down\n  522, // Connection Timed Out\n  523, // Origin Is Unreachable\n  524 // A Timeout Occurred\n]\n\nconst doFetch = (...args) => {\n  try {\n    return fetch(...args)\n  } catch (err) {\n    return unfetch(...args)\n  }\n}\n\nconst validateStatus = async response => {\n  // eslint-disable-next-line eqeqeq\n  if (temporaryErrorHttpCodes.find(code => code == response.status)) {\n    throw new FetchError({\n      code: response.status,\n      message: await response.text()\n    })\n  }\n}\n\nconst createApi = ({ origin, rootPath, jwtProvider, store }) => {\n  const request = async (url, body) => {\n    const rootBasedUrl = getRootBasedUrl(origin, rootPath, url)\n    const options = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'same-origin',\n      body: JSON.stringify(body)\n    }\n\n    if (jwtProvider) {\n      const jwtToken = await jwtProvider.get()\n      if (jwtToken) {\n        options.headers.Authorization = `Bearer ${jwtToken}`\n      }\n    }\n    const response = await doFetch(rootBasedUrl, options)\n\n    if (jwtProvider) {\n      const responseJwtToken = response.headers.get('x-jwt')\n      await jwtProvider.set(responseJwtToken)\n    }\n    syncJwtProviderWithStore(jwtProvider, store).catch(\n      // eslint-disable-next-line no-console\n      error => console.error(error)\n    )\n\n    return response\n  }\n\n  return {\n    async loadViewModelState({ viewModelName, aggregateIds, aggregateArgs }) {\n      let response, result\n      try {\n        const queryAggregateIds =\n          aggregateIds === '*' ? aggregateIds : aggregateIds.join(',')\n\n        response = await request(\n          `/api/query/${viewModelName}/${queryAggregateIds}`,\n          {\n            aggregateArgs\n          }\n        )\n      } catch (error) {\n        throw new FetchError(error)\n      }\n\n      await validateStatus(response)\n\n      if (!response.ok) {\n        throw new HttpError({\n          code: response.status,\n          message: await response.text()\n        })\n      }\n\n      try {\n        result = await response.text()\n      } catch (error) {\n        throw new HttpError(error)\n      }\n\n      return {\n        timestamp: Number(new Date(response.headers.get('Date'))),\n        result\n      }\n    },\n\n    async loadReadModelState({ readModelName, resolverName, resolverArgs }) {\n      let response, result\n      try {\n        response = await request(\n          `/api/query/${readModelName}/${resolverName}`,\n          resolverArgs\n        )\n      } catch (error) {\n        throw new FetchError(error)\n      }\n\n      await validateStatus(response)\n\n      if (!response.ok) {\n        throw new HttpError({\n          code: response.status,\n          message: await response.text()\n        })\n      }\n\n      try {\n        result = await response.text()\n      } catch (error) {\n        throw new HttpError(error)\n      }\n\n      return {\n        timestamp: Number(new Date(response.headers.get('Date'))),\n        result\n      }\n    },\n\n    async sendCommand({ commandType, aggregateId, aggregateName, payload }) {\n      let response, result\n      try {\n        response = await request('/api/commands', {\n          type: commandType,\n          aggregateId,\n          aggregateName,\n          payload\n        })\n      } catch (error) {\n        throw new FetchError(error)\n      }\n\n      await validateStatus(response)\n\n      if (!response.ok) {\n        throw new HttpError({\n          code: response.status,\n          message: await response.text()\n        })\n      }\n\n      try {\n        result = await response.json()\n      } catch (error) {\n        throw new HttpError(error)\n      }\n\n      return result\n    },\n\n    async getSubscribeAdapterOptions(adapterName) {\n      let response, result\n      try {\n        response = await request('/api/subscribe', {\n          origin,\n          rootPath,\n          adapterName\n        })\n      } catch (error) {\n        throw new FetchError(error)\n      }\n\n      await validateStatus(response)\n\n      if (!response.ok) {\n        throw new HttpError({\n          code: response.status,\n          message: await response.text()\n        })\n      }\n\n      try {\n        result = await response.json()\n      } catch (error) {\n        throw new HttpError(error)\n      }\n\n      return result\n    },\n\n    async request({ url, body }) {\n      return request(url, body)\n    }\n  }\n}\n\nexport default createApi\n"],"file":"create_api.js"}