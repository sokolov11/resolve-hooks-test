{"version":3,"sources":["../src/event_listener_saga.js"],"names":["eventListenerSaga","connectAction","viewModels","sagaKey","sagaManager","eventTypes","store","action","type","DISPATCH_TOPIC_MESSAGE","indexOf","message","aggregateIds","aggregateId","event","viewModelAggregateVersionsMap","aggregateVersionsMap","viewModelLastTimestampMap","lastTimestampMap","key","viewModelName","aggregateArgs","hasOwnProperty","lastTimestamp","versionsMap","aggregateVersion","timestamp","console","warn","stop","CONNECT_VIEWMODEL","dispatch","skipConnectionManager"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,iBAAiB;AAAA;AAAA,6BAAG,SAApBA,iBAAoB,OAExBC,aAFwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBC,UAAAA,UADsB,QACtBA,UADsB,EACVC,OADU,QACVA,OADU,EACDC,WADC,QACDA,WADC,EACYC,UADZ,QACYA,UADZ,EACwBC,KADxB,QACwBA,KADxB;;AAAA;AAAA,eAIjB,IAJiB;AAAA;AAAA;AAAA;;AAAA;AAKK,iBAAM,mBAC/B,UAAAC,MAAM;AAAA,mBACJA,MAAM,CAACC,IAAP,KAAgBC,oCAAhB,IACAJ,UAAU,CAACK,OAAX,CAAmBH,MAAM,CAACI,OAAP,CAAeH,IAAlC,IAA0C,CAAC,CAD3C,KAECP,aAAa,CAACW,YAAd,KAA+B,GAA/B,IACCX,aAAa,CAACW,YAAd,CAA2BF,OAA3B,CAAmCH,MAAM,CAACI,OAAP,CAAeE,WAAlD,IAAiE,CAAC,CAHpE,CADI;AAAA,WADyB,CAAN;;AALL;AAAA;AAKLC,UAAAA,KALK,SAKdH,OALc;AAAA;AAkBlB,iBAAM,sBAAN;;AAlBkB;AAAA;AAAA,mCAcpBT,UAdoB;AAeMa,UAAAA,6BAfN,oBAejBC,+BAfiB;AAgBEC,UAAAA,yBAhBF,oBAgBjBC,2BAhBiB;AAoBhBC,UAAAA,GApBgB,QAoBPlB,aAAa,CAACmB,aApBP,GAoBuB,0BAC3CnB,aAAa,CAACW,YAD6B,CApBvB,GAsBlB,0BAAQX,aAAa,CAACoB,aAAtB,CAtBkB;;AAAA,cAwBjBN,6BAA6B,CAACO,cAA9B,CAA6CH,GAA7C,CAxBiB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA4BhBI,UAAAA,aA5BgB,GA4BAN,yBAAyB,CAACE,GAAD,CA5BzB;AA6BhBK,UAAAA,WA7BgB,GA6BFT,6BAA6B,CAACI,GAAD,CA7B3B;;AA8BtB,cAAI,CAACK,WAAW,CAACF,cAAZ,CAA2BR,KAAK,CAACD,WAAjC,CAAL,EAAoD;AAClDW,YAAAA,WAAW,CAACV,KAAK,CAACD,WAAP,CAAX,GAAiC,CAAjC;AACD;;AAhCqB,gBAmCpBC,KAAK,CAACW,gBAAN,GAAyBD,WAAW,CAACV,KAAK,CAACD,WAAP,CAApC,IACAC,KAAK,CAACY,SAAN,IAAmBH,aApCC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuClB,iBAAM,kBAAIT,KAAJ,CAAN;;AAvCkB;AAwClBU,UAAAA,WAAW,CAACV,KAAK,CAACD,WAAP,CAAX,GAAiCC,KAAK,CAACW,gBAAvC;AACAR,UAAAA,yBAAyB,CAACE,GAAD,CAAzB,GAAiCL,KAAK,CAACY,SAAvC;AAzCkB;AAAA;;AAAA;AAAA;AAAA;AA2ClB;AACAC,UAAAA,OAAO,CAACC,IAAR;AAEA,wCAAO,oDAA+B;AACpC1B,YAAAA,UAAU,EAAVA,UADoC;AAEpCkB,YAAAA,aAAa,EAAEnB,aAAa,CAACmB,aAFO;AAGpCR,YAAAA,YAAY,EAAEX,aAAa,CAACW;AAHQ,WAA/B,CAAP;;AA9CkB;AAoDlB,wCAAOR,WAAW,CAACyB,IAAZ,MAAoBC,+BAApB,GAAwC3B,OAAxC,EAAmD;AAAA,mBACxDG,KAAK,CAACyB,QAAN,mBACK9B,aADL;AAEE+B,cAAAA,qBAAqB,EAAE;AAFzB,eADwD;AAAA,WAAnD,CAAP;;AApDkB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApBhC,iBAAoB;AAAA,CAAH,CAAvB;;eA+DeA,iB","sourcesContent":["import { take, put, select } from 'redux-saga/effects'\n\nimport getHash from './get_hash'\nimport { aggregateVersionsMap, lastTimestampMap } from './constants'\nimport { CONNECT_VIEWMODEL, DISPATCH_TOPIC_MESSAGE } from './action_types'\nimport unsubscribeViewModelTopicsSaga from './unsubscribe_view_model_topics_saga'\n\nconst eventListenerSaga = function*(\n  { viewModels, sagaKey, sagaManager, eventTypes, store },\n  connectAction\n) {\n  while (true) {\n    const { message: event } = yield take(\n      action =>\n        action.type === DISPATCH_TOPIC_MESSAGE &&\n        eventTypes.indexOf(action.message.type) > -1 &&\n        (connectAction.aggregateIds === '*' ||\n          connectAction.aggregateIds.indexOf(action.message.aggregateId) > -1)\n    )\n\n    const {\n      viewModels: {\n        [aggregateVersionsMap]: viewModelAggregateVersionsMap,\n        [lastTimestampMap]: viewModelLastTimestampMap\n      }\n    } = yield select()\n\n    const key = `${connectAction.viewModelName}${getHash(\n      connectAction.aggregateIds\n    )}${getHash(connectAction.aggregateArgs)}`\n\n    if (!viewModelAggregateVersionsMap.hasOwnProperty(key)) {\n      continue\n    }\n\n    const lastTimestamp = viewModelLastTimestampMap[key]\n    const versionsMap = viewModelAggregateVersionsMap[key]\n    if (!versionsMap.hasOwnProperty(event.aggregateId)) {\n      versionsMap[event.aggregateId] = 0\n    }\n\n    if (\n      event.aggregateVersion > versionsMap[event.aggregateId] &&\n      event.timestamp >= lastTimestamp\n    ) {\n      try {\n        yield put(event)\n        versionsMap[event.aggregateId] = event.aggregateVersion\n        viewModelLastTimestampMap[key] = event.timestamp\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(error)\n\n        yield* unsubscribeViewModelTopicsSaga({\n          viewModels,\n          viewModelName: connectAction.viewModelName,\n          aggregateIds: connectAction.aggregateIds\n        })\n\n        yield* sagaManager.stop(`${CONNECT_VIEWMODEL}${sagaKey}`, () =>\n          store.dispatch({\n            ...connectAction,\n            skipConnectionManager: true\n          })\n        )\n      }\n    }\n  }\n}\n\nexport default eventListenerSaga\n"],"file":"event_listener_saga.js"}