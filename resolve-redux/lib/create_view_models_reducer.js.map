{"version":3,"sources":["../src/create_view_models_reducer.js"],"names":["dropKey","state","key","nextState","createViewModelsReducer","viewModels","handlers","LOAD_VIEWMODEL_STATE_REQUEST","action","viewModelName","aggregateIds","aggregateArgs","connectorMetaMap","isLoading","isFailure","aggregateVersionsMap","lastTimestampMap","Infinity","LOAD_VIEWMODEL_STATE_SUCCESS","viewModelState","result","viewModelTimestamp","timestamp","LOAD_VIEWMODEL_STATE_FAILURE","error","DROP_VIEWMODEL_STATE","aggregateHash","Map","CONNECT_VIEWMODEL","aggregatesKey","aggregateId","has","set","get","push","DISCONNECT_VIEWMODEL","aggregateKeys","idx","indexOf","splice","length","uniqueListeners","viewModel","Object","keys","projection","filter","eventType","handler","type","Array","from","Set","aggregateKey","name","entries","_","eventHandler"],"mappings":"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","sourcesContent":["import getHash from './get_hash'\n\nimport {\n  LOAD_VIEWMODEL_STATE_REQUEST,\n  LOAD_VIEWMODEL_STATE_SUCCESS,\n  LOAD_VIEWMODEL_STATE_FAILURE,\n  DROP_VIEWMODEL_STATE,\n  CONNECT_VIEWMODEL,\n  DISCONNECT_VIEWMODEL\n} from './action_types'\n\nimport {\n  connectorMetaMap,\n  aggregateVersionsMap,\n  lastTimestampMap\n} from './constants'\n\nexport const dropKey = (state, key) => {\n  const nextState = { ...state }\n  delete nextState[key]\n\n  return nextState\n}\n\nexport default function createViewModelsReducer(viewModels) {\n  const handlers = {}\n\n  handlers[LOAD_VIEWMODEL_STATE_REQUEST] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [connectorMetaMap]: {\n        ...state[connectorMetaMap],\n        [`${viewModelName}${aggregateIds}${aggregateArgs}`]: {\n          isLoading: true,\n          isFailure: false\n        }\n      },\n      [aggregateVersionsMap]: {\n        ...state[aggregateVersionsMap],\n        [key]: {}\n      },\n      [lastTimestampMap]: {\n        ...state[lastTimestampMap],\n        [key]: +Infinity\n      }\n    }\n  }\n\n  handlers[LOAD_VIEWMODEL_STATE_SUCCESS] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n    const viewModelState = action.result\n    const viewModelTimestamp = action.timestamp\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [viewModelName]: {\n        ...(state[viewModelName] || {}),\n        [aggregateIds]: {\n          ...((state[viewModelName] || {})[aggregateIds] || {}),\n          [aggregateArgs]: viewModelState\n        }\n      },\n      [connectorMetaMap]: {\n        ...state[connectorMetaMap],\n        [key]: {\n          isLoading: false,\n          isFailure: false\n        }\n      },\n      [lastTimestampMap]: {\n        ...state[lastTimestampMap],\n        [key]: viewModelTimestamp\n      }\n    }\n  }\n\n  handlers[LOAD_VIEWMODEL_STATE_FAILURE] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n    const error = action.error\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [connectorMetaMap]: {\n        ...state[connectorMetaMap],\n        [key]: {\n          isLoading: false,\n          isFailure: true,\n          error\n        }\n      }\n    }\n  }\n\n  handlers[DROP_VIEWMODEL_STATE] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [viewModelName]: {\n        ...state[viewModelName],\n        [aggregateIds]: dropKey(\n          state[viewModelName][aggregateIds],\n          aggregateArgs\n        )\n      },\n      [connectorMetaMap]: dropKey(state[connectorMetaMap], key),\n      [aggregateVersionsMap]: dropKey(state[aggregateVersionsMap], key),\n      [lastTimestampMap]: dropKey(state[lastTimestampMap], key)\n    }\n  }\n\n  const aggregateHash = new Map()\n\n  handlers[CONNECT_VIEWMODEL] = (state, action) => {\n    if (action.aggregateIds !== '*') {\n      const aggregatesKey = getHash(action.aggregateIds)\n      for (const aggregateId of action.aggregateIds) {\n        if (!aggregateHash.has(aggregateId)) {\n          aggregateHash.set(aggregateId, [])\n        }\n        aggregateHash.get(aggregateId).push(aggregatesKey)\n      }\n    }\n    return state\n  }\n\n  handlers[DISCONNECT_VIEWMODEL] = (state, action) => {\n    if (action.aggregateIds !== '*') {\n      const aggregatesKey = getHash(action.aggregateIds)\n      for (const aggregateId of action.aggregateIds) {\n        const aggregateKeys = aggregateHash.get(aggregateId)\n        const idx = aggregateKeys.indexOf(aggregatesKey)\n        if (idx >= 0) {\n          aggregateKeys.splice(idx, 1)\n        }\n        if (aggregateKeys.length === 0) {\n          aggregateHash.delete(aggregateId)\n        }\n      }\n    }\n    return state\n  }\n\n  const uniqueListeners = new Map()\n\n  for (const viewModel of viewModels) {\n    for (const eventType of Object.keys(viewModel.projection).filter(\n      eventType => eventType !== 'Init'\n    )) {\n      if (!uniqueListeners.has(eventType)) {\n        uniqueListeners.set(eventType, [])\n      }\n      uniqueListeners.get(eventType).push(viewModel)\n    }\n  }\n\n  for (const [eventType, viewModels] of uniqueListeners.entries()) {\n    handlers[eventType] = (state, action) => {\n      for (const viewModel of viewModels) {\n        const handler = viewModel.projection[action.type]\n\n        const aggregateKeys = Array.from(\n          new Set(aggregateHash.get(action.aggregateId))\n        )\n\n        for (const aggregateKey of aggregateKeys) {\n          if (state[viewModel.name] && state[viewModel.name][aggregateKey]) {\n            for (const aggregateArgs of Object.keys(\n              state[viewModel.name][aggregateKey]\n            )) {\n              state[viewModel.name][aggregateKey][aggregateArgs] = handler(\n                state[viewModel.name][aggregateKey][aggregateArgs],\n                action\n              )\n            }\n\n            state[viewModel.name][aggregateKey] = {\n              ...state[viewModel.name][aggregateKey]\n            }\n          }\n        }\n\n        if (state[viewModel.name] && state[viewModel.name]['*']) {\n          for (const aggregateArgs of Object.keys(state[viewModel.name]['*'])) {\n            state[viewModel.name]['*'][aggregateArgs] = handler(\n              state[viewModel.name]['*'][aggregateArgs],\n              action\n            )\n          }\n\n          state[viewModel.name]['*'] = { ...state[viewModel.name]['*'] }\n        }\n\n        state[viewModel.name] = { ...state[viewModel.name] }\n      }\n\n      return { ...state }\n    }\n  }\n\n  let state = {\n    [connectorMetaMap]: {},\n    [aggregateVersionsMap]: {},\n    [lastTimestampMap]: {}\n  }\n\n  return (_, action) => {\n    const eventHandler = handlers[action.type]\n    if (eventHandler) {\n      state = eventHandler(state, action)\n    }\n\n    return state\n  }\n}\n"],"file":"create_view_models_reducer.js"}