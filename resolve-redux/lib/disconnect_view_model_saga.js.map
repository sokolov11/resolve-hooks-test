{"version":3,"sources":["../src/disconnect_view_model_saga.js"],"names":["disconnectViewModelSaga","sagaArgs","action","viewModels","connectionManager","sagaManager","sagaKey","viewModelName","aggregateIds","aggregateArgs","connectionId","removeConnection","connectionName","removedConnections","length","stop","CONNECT_VIEWMODEL"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAEA,IAAMA,uBAAuB;AAAA;AAAA,6BAAG,SAA1BA,uBAA0B,CAAUC,QAAV,EAAoBC,MAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBC,UAAAA,UADsB,GACkCF,QADlC,CACtBE,UADsB,EACVC,iBADU,GACkCH,QADlC,CACVG,iBADU,EACSC,WADT,GACkCJ,QADlC,CACSI,WADT,EACsBC,OADtB,GACkCL,QADlC,CACsBK,OADtB;AAGtBC,UAAAA,aAHsB,GAGyBL,MAHzB,CAGtBK,aAHsB,EAGPC,YAHO,GAGyBN,MAHzB,CAGPM,YAHO,EAGOC,aAHP,GAGyBP,MAHzB,CAGOO,aAHP;AAKxBC,UAAAA,YALwB,QAKN,0BAAQF,YAAR,CALM,GAKkB,0BAAQC,aAAR,CALlB;AAAA,kCAOCL,iBAAiB,CAACO,gBAAlB,CAAmC;AAChEC,YAAAA,cAAc,EAAEL,aADgD;AAEhEG,YAAAA,YAAY,EAAZA;AAFgE,WAAnC,CAPD,EAOtBG,kBAPsB,yBAOtBA,kBAPsB;;AAAA,gBAW1BA,kBAAkB,CAACC,MAAnB,KAA8B,CAXJ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAe9B,wCAAOT,WAAW,CAACU,IAAZ,MAAoBC,+BAApB,GAAwCV,OAAxC,CAAP;;AAf8B;AAAA;AAiB9B,iBAAM,kBAAI,iCAAmBC,aAAnB,EAAkCC,YAAlC,EAAgDC,aAAhD,CAAJ,CAAN;;AAjB8B;AAmB9B,wCAAO,oDAA+B;AACpCN,YAAAA,UAAU,EAAVA,UADoC;AAEpCI,YAAAA,aAAa,EAAbA,aAFoC;AAGpCC,YAAAA,YAAY,EAAZA;AAHoC,WAA/B,CAAP;;AAnB8B;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1BR,uBAA0B;AAAA,CAAH,CAA7B;;eA0BeA,uB","sourcesContent":["import { put } from 'redux-saga/effects'\n\nimport getHash from './get_hash'\nimport { dropViewModelState } from './actions'\nimport { CONNECT_VIEWMODEL } from './action_types'\nimport unsubscribeViewModelTopicsSaga from './unsubscribe_view_model_topics_saga'\n\nconst disconnectViewModelSaga = function*(sagaArgs, action) {\n  const { viewModels, connectionManager, sagaManager, sagaKey } = sagaArgs\n\n  const { viewModelName, aggregateIds, aggregateArgs } = action\n\n  const connectionId = `${getHash(aggregateIds)}${getHash(aggregateArgs)}`\n\n  const { removedConnections } = connectionManager.removeConnection({\n    connectionName: viewModelName,\n    connectionId\n  })\n  if (removedConnections.length !== 1) {\n    return\n  }\n\n  yield* sagaManager.stop(`${CONNECT_VIEWMODEL}${sagaKey}`)\n\n  yield put(dropViewModelState(viewModelName, aggregateIds, aggregateArgs))\n\n  yield* unsubscribeViewModelTopicsSaga({\n    viewModels,\n    viewModelName,\n    aggregateIds\n  })\n}\n\nexport default disconnectViewModelSaga\n"],"file":"disconnect_view_model_saga.js"}