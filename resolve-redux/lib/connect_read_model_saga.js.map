{"version":3,"sources":["../src/connect_read_model_saga.js"],"names":["connectReadModelSaga","sagaArgs","action","connectionManager","sagaManager","sagaKey","queryIdMap","sessionId","readModelName","resolverName","resolverArgs","skipConnectionManager","addConnection","connectionName","connectionId","addedConnections","length","stop","DISCONNECT_READMODEL","key","has","set","get","queryId","type","LOAD_READMODEL_STATE_SUCCESS","LOAD_READMODEL_STATE_FAILURE","loadReadModelStateResultAction","error","HttpError","console","warn"],"mappings":"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","sourcesContent":["import { take, put, delay } from 'redux-saga/effects'\nimport hash from 'uuid'\n\nimport getHash from './get_hash'\nimport { loadReadModelStateRequest } from './actions'\nimport {\n  DISCONNECT_READMODEL,\n  LOAD_READMODEL_STATE_FAILURE,\n  LOAD_READMODEL_STATE_SUCCESS\n} from './action_types'\n\nimport { HttpError } from './create_api'\n\n/*\n  Saga is launched on action `CONNECT_READMODEL`, emitted by read model connector.\n  If read model with supposed options had already been fetched, do nothing.\n  Saga performs resolver result fetching and subscribes to diff topic.\n  Resolver result is fetched by `load_read_model_state_saga`, interaction\n  performs through following actions: `LOAD_READMODEL_STATE_REQUEST`,\n  `LOAD_READMODEL_STATE_SUCCESS` and `LOAD_READMODEL_STATE_FAILURE`.\n*/\n\nconst connectReadModelSaga = function*(sagaArgs, action) {\n  const {\n    connectionManager,\n    sagaManager,\n    sagaKey,\n    queryIdMap,\n    sessionId\n  } = sagaArgs\n  const {\n    readModelName,\n    resolverName,\n    resolverArgs,\n    skipConnectionManager\n  } = action\n\n  if (!skipConnectionManager) {\n    const { addedConnections } = connectionManager.addConnection({\n      connectionName: readModelName,\n      connectionId: `${getHash(action.resolverName)}${getHash(\n        action.resolverArgs\n      )}`\n    })\n\n    if (addedConnections.length !== 1) {\n      return\n    }\n  }\n\n  yield* sagaManager.stop(`${DISCONNECT_READMODEL}${sagaKey}`)\n\n  const key = `${readModelName}${getHash(action.resolverName)}${getHash(\n    action.resolverArgs\n  )}`\n  if (!queryIdMap.has(key)) {\n    queryIdMap.set(key, 0)\n  }\n  queryIdMap.set(key, queryIdMap.get(key) + 1)\n\n  const queryId = hash(\n    `${key}${queryIdMap.get(key)}${sessionId}`,\n    '00000000-0000-0000-0000-000000000000'\n  )\n\n  while (true) {\n    yield put(\n      loadReadModelStateRequest(\n        readModelName,\n        resolverName,\n        resolverArgs,\n        queryId\n      )\n    )\n\n    const loadReadModelStateResultAction = yield take(\n      action =>\n        (action.type === LOAD_READMODEL_STATE_SUCCESS ||\n          action.type === LOAD_READMODEL_STATE_FAILURE) &&\n        action.queryId === queryId\n    )\n\n    if (loadReadModelStateResultAction.type === LOAD_READMODEL_STATE_SUCCESS) {\n      break\n    }\n\n    if (\n      loadReadModelStateResultAction.type === LOAD_READMODEL_STATE_FAILURE &&\n      loadReadModelStateResultAction.error instanceof HttpError\n    ) {\n      // eslint-disable-next-line no-console\n      console.warn('Http error: ', loadReadModelStateResultAction.error)\n      return\n    }\n\n    yield delay(500)\n  }\n}\n\nexport default connectReadModelSaga\n"],"file":"connect_read_model_saga.js"}