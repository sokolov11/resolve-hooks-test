{"version":3,"sources":["../src/unsubscribe_view_model_topics_saga.js"],"names":["take","put","unsubscribeTopicRequest","UNSUBSCRIBE_TOPIC_FAILURE","UNSUBSCRIBE_TOPIC_SUCCESS","unsubscribeViewModelTopicsSaga","viewModels","viewModelName","aggregateIds","viewModel","find","name","eventTypes","Object","keys","projection","filter","eventType","subscriptionKeys","reduce","acc","Array","isArray","push","map","aggregateId","length","counter","action","type","key","topicId","topicName","unsubscribeResultAction"],"mappings":"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","sourcesContent":["import { take, put } from 'redux-saga/effects'\n\nimport { unsubscribeTopicRequest } from './actions'\nimport {\n  UNSUBSCRIBE_TOPIC_FAILURE,\n  UNSUBSCRIBE_TOPIC_SUCCESS\n} from './action_types'\n\nconst unsubscribeViewModelTopicsSaga = function*({\n  viewModels,\n  viewModelName,\n  aggregateIds\n}) {\n  const viewModel = viewModels.find(({ name }) => name === viewModelName)\n  const eventTypes = Object.keys(viewModel.projection).filter(\n    eventType => eventType !== 'Init'\n  )\n\n  let subscriptionKeys = eventTypes.reduce((acc, eventType) => {\n    if (Array.isArray(aggregateIds)) {\n      acc.push(...aggregateIds.map(aggregateId => ({ aggregateId, eventType })))\n    } else if (aggregateIds === '*') {\n      acc.push({ aggregateId: '*', eventType })\n    }\n    return acc\n  }, [])\n\n  while (subscriptionKeys.length > 0) {\n    let counter = subscriptionKeys.length\n    for (const { aggregateId, eventType } of subscriptionKeys) {\n      yield put(unsubscribeTopicRequest(eventType, aggregateId))\n    }\n\n    while (counter > 0) {\n      const unsubscribeResultAction = yield take(\n        // eslint-disable-next-line no-loop-func\n        action =>\n          (action.type === UNSUBSCRIBE_TOPIC_SUCCESS ||\n            action.type === UNSUBSCRIBE_TOPIC_FAILURE) &&\n          subscriptionKeys.find(\n            key =>\n              key.aggregateId === action.topicId &&\n              key.eventType === action.topicName\n          )\n      )\n\n      if (unsubscribeResultAction.type === UNSUBSCRIBE_TOPIC_SUCCESS) {\n        subscriptionKeys = subscriptionKeys.filter(\n          key =>\n            !(\n              key.aggregateId === unsubscribeResultAction.topicId &&\n              key.eventType === unsubscribeResultAction.topicName\n            )\n        )\n      }\n\n      counter--\n    }\n  }\n}\n\nexport default unsubscribeViewModelTopicsSaga\n"],"file":"unsubscribe_view_model_topics_saga.js"}