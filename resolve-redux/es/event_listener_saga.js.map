{"version":3,"sources":["../src/event_listener_saga.js"],"names":["take","put","select","getHash","aggregateVersionsMap","lastTimestampMap","CONNECT_VIEWMODEL","DISPATCH_TOPIC_MESSAGE","unsubscribeViewModelTopicsSaga","eventListenerSaga","connectAction","viewModels","sagaKey","sagaManager","eventTypes","store","action","type","indexOf","message","aggregateIds","aggregateId","event","viewModelAggregateVersionsMap","viewModelLastTimestampMap","key","viewModelName","aggregateArgs","hasOwnProperty","lastTimestamp","versionsMap","aggregateVersion","timestamp","console","warn","stop","dispatch","skipConnectionManager"],"mappings":"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","sourcesContent":["import { take, put, select } from 'redux-saga/effects'\n\nimport getHash from './get_hash'\nimport { aggregateVersionsMap, lastTimestampMap } from './constants'\nimport { CONNECT_VIEWMODEL, DISPATCH_TOPIC_MESSAGE } from './action_types'\nimport unsubscribeViewModelTopicsSaga from './unsubscribe_view_model_topics_saga'\n\nconst eventListenerSaga = function*(\n  { viewModels, sagaKey, sagaManager, eventTypes, store },\n  connectAction\n) {\n  while (true) {\n    const { message: event } = yield take(\n      action =>\n        action.type === DISPATCH_TOPIC_MESSAGE &&\n        eventTypes.indexOf(action.message.type) > -1 &&\n        (connectAction.aggregateIds === '*' ||\n          connectAction.aggregateIds.indexOf(action.message.aggregateId) > -1)\n    )\n\n    const {\n      viewModels: {\n        [aggregateVersionsMap]: viewModelAggregateVersionsMap,\n        [lastTimestampMap]: viewModelLastTimestampMap\n      }\n    } = yield select()\n\n    const key = `${connectAction.viewModelName}${getHash(\n      connectAction.aggregateIds\n    )}${getHash(connectAction.aggregateArgs)}`\n\n    if (!viewModelAggregateVersionsMap.hasOwnProperty(key)) {\n      continue\n    }\n\n    const lastTimestamp = viewModelLastTimestampMap[key]\n    const versionsMap = viewModelAggregateVersionsMap[key]\n    if (!versionsMap.hasOwnProperty(event.aggregateId)) {\n      versionsMap[event.aggregateId] = 0\n    }\n\n    if (\n      event.aggregateVersion > versionsMap[event.aggregateId] &&\n      event.timestamp >= lastTimestamp\n    ) {\n      try {\n        yield put(event)\n        versionsMap[event.aggregateId] = event.aggregateVersion\n        viewModelLastTimestampMap[key] = event.timestamp\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(error)\n\n        yield* unsubscribeViewModelTopicsSaga({\n          viewModels,\n          viewModelName: connectAction.viewModelName,\n          aggregateIds: connectAction.aggregateIds\n        })\n\n        yield* sagaManager.stop(`${CONNECT_VIEWMODEL}${sagaKey}`, () =>\n          store.dispatch({\n            ...connectAction,\n            skipConnectionManager: true\n          })\n        )\n      }\n    }\n  }\n}\n\nexport default eventListenerSaga\n"],"file":"event_listener_saga.js"}