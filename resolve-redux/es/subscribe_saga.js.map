{"version":3,"sources":["../src/subscribe_saga.js"],"names":["put","takeEvery","fork","delay","createConnectionManager","createEmptySubscribeAdapter","SUBSCRIBE_TOPIC_REQUEST","UNSUBSCRIBE_TOPIC_REQUEST","subscribeTopicSuccess","subscribeTopicFailure","unsubscribeTopicSuccess","unsubscribeTopicFailure","dispatchTopicMessage","SUBSCRIBE_ADAPTER_POLL_INTERVAL","initSubscribeAdapter","api","origin","rootPath","store","createSubscribeAdapter","subscribeAdapter","getSubscribeAdapterOptions","adapterName","appId","url","onEvent","event","dispatch","init","subscribeSaga","subscribeSagaOptions","connectionManager","subscribeAdapterPromise","isConnected","activeConnections","getConnections","refreshSubscribeAdapter","Promise","resolve","reject","value","Error","close","subscribeToTopics","map","connectionName","connectionId","topicName","topicId","addConnection","addedConnections","removedConnections","all","length","unsubscribeFromTopics","removeConnection"],"mappings":"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","sourcesContent":["import { put, takeEvery, fork, delay } from 'redux-saga/effects'\n\nimport createConnectionManager from './create_connection_manager'\nimport createEmptySubscribeAdapter from './empty_subscribe_adapter'\n\nimport {\n  SUBSCRIBE_TOPIC_REQUEST,\n  UNSUBSCRIBE_TOPIC_REQUEST\n} from './action_types'\nimport {\n  subscribeTopicSuccess,\n  subscribeTopicFailure,\n  unsubscribeTopicSuccess,\n  unsubscribeTopicFailure,\n  dispatchTopicMessage\n} from './actions'\n\nconst SUBSCRIBE_ADAPTER_POLL_INTERVAL = 5000\n\nconst initSubscribeAdapter = async ({\n  api,\n  origin,\n  rootPath,\n  store,\n  subscribeAdapter: createSubscribeAdapter\n}) => {\n  if (createSubscribeAdapter === createEmptySubscribeAdapter) {\n    return createEmptySubscribeAdapter()\n  }\n\n  const { appId, url } = await api.getSubscribeAdapterOptions(\n    createSubscribeAdapter.adapterName\n  )\n\n  const onEvent = event => store.dispatch(dispatchTopicMessage(event))\n\n  const subscribeAdapter = createSubscribeAdapter({\n    appId,\n    origin,\n    rootPath,\n    url,\n    onEvent\n  })\n\n  await subscribeAdapter.init()\n\n  return subscribeAdapter\n}\n\nconst subscribeSaga = function*(subscribeSagaOptions) {\n  const connectionManager = createConnectionManager()\n  let subscribeAdapterPromise = initSubscribeAdapter(subscribeSagaOptions)\n\n  yield fork(function*() {\n    while (true) {\n      yield delay(SUBSCRIBE_ADAPTER_POLL_INTERVAL)\n      let subscribeAdapter = null\n\n      try {\n        subscribeAdapter = yield subscribeAdapterPromise\n        if (subscribeAdapter.isConnected()) {\n          continue\n        }\n      } catch (error) {}\n\n      const activeConnections = connectionManager.getConnections()\n      let refreshSubscribeAdapter = null\n\n      subscribeAdapterPromise = new Promise(\n        (resolve, reject) =>\n          (refreshSubscribeAdapter = value =>\n            value != null && value instanceof Error\n              ? reject(value)\n              : resolve(value))\n      )\n      subscribeAdapterPromise.catch(() => {})\n\n      try {\n        if (subscribeAdapter != null) {\n          yield subscribeAdapter.close()\n        }\n\n        subscribeAdapter = yield initSubscribeAdapter(subscribeSagaOptions)\n\n        yield subscribeAdapter.subscribeToTopics(\n          activeConnections.map(({ connectionName, connectionId }) => ({\n            topicName: connectionName,\n            topicId: connectionId\n          }))\n        )\n\n        refreshSubscribeAdapter(subscribeAdapter)\n      } catch (error) {\n        refreshSubscribeAdapter(error)\n      }\n    }\n  })\n\n  yield takeEvery(SUBSCRIBE_TOPIC_REQUEST, function*({ topicName, topicId }) {\n    const subscribeAdapter = yield subscribeAdapterPromise\n\n    const {\n      addedConnections,\n      removedConnections\n    } = connectionManager.addConnection({\n      connectionName: topicName,\n      connectionId: topicId\n    })\n\n    try {\n      yield Promise.all([\n        addedConnections.length > 0\n          ? subscribeAdapter.subscribeToTopics(\n              addedConnections.map(({ connectionName, connectionId }) => ({\n                topicName: connectionName,\n                topicId: connectionId\n              }))\n            )\n          : Promise.resolve(),\n        removedConnections.length > 0\n          ? subscribeAdapter.unsubscribeFromTopics(\n              removedConnections.map(({ connectionName, connectionId }) => ({\n                topicName: connectionName,\n                topicId: connectionId\n              }))\n            )\n          : Promise.resolve()\n      ])\n      yield put(subscribeTopicSuccess(topicName, topicId))\n    } catch (error) {\n      yield put(subscribeTopicFailure(topicName, topicId, error))\n    }\n  })\n\n  yield takeEvery(UNSUBSCRIBE_TOPIC_REQUEST, function*({ topicName, topicId }) {\n    const subscribeAdapter = yield subscribeAdapterPromise\n\n    const {\n      addedConnections,\n      removedConnections\n    } = connectionManager.removeConnection({\n      connectionName: topicName,\n      connectionId: topicId\n    })\n\n    try {\n      yield Promise.all([\n        addedConnections.length > 0\n          ? subscribeAdapter.subscribeToTopics(\n              addedConnections.map(({ connectionName, connectionId }) => ({\n                topicName: connectionName,\n                topicId: connectionId\n              }))\n            )\n          : Promise.resolve(),\n        removedConnections.length > 0\n          ? subscribeAdapter.unsubscribeFromTopics(\n              removedConnections.map(({ connectionName, connectionId }) => ({\n                topicName: connectionName,\n                topicId: connectionId\n              }))\n            )\n          : Promise.resolve()\n      ])\n      yield put(unsubscribeTopicSuccess(topicName, topicId))\n    } catch (error) {\n      yield put(unsubscribeTopicFailure(topicName, topicId, error))\n    }\n  })\n}\n\nexport default subscribeSaga\n"],"file":"subscribe_saga.js"}