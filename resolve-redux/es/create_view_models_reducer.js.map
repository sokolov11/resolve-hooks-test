{"version":3,"sources":["../src/create_view_models_reducer.js"],"names":["getHash","LOAD_VIEWMODEL_STATE_REQUEST","LOAD_VIEWMODEL_STATE_SUCCESS","LOAD_VIEWMODEL_STATE_FAILURE","DROP_VIEWMODEL_STATE","CONNECT_VIEWMODEL","DISCONNECT_VIEWMODEL","connectorMetaMap","aggregateVersionsMap","lastTimestampMap","dropKey","state","key","nextState","createViewModelsReducer","viewModels","handlers","action","viewModelName","aggregateIds","aggregateArgs","isLoading","isFailure","Infinity","viewModelState","result","viewModelTimestamp","timestamp","error","aggregateHash","Map","aggregatesKey","aggregateId","has","set","get","push","aggregateKeys","idx","indexOf","splice","length","uniqueListeners","viewModel","Object","keys","projection","filter","eventType","handler","type","Array","from","Set","aggregateKey","name","entries","_","eventHandler"],"mappings":"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","sourcesContent":["import getHash from './get_hash'\n\nimport {\n  LOAD_VIEWMODEL_STATE_REQUEST,\n  LOAD_VIEWMODEL_STATE_SUCCESS,\n  LOAD_VIEWMODEL_STATE_FAILURE,\n  DROP_VIEWMODEL_STATE,\n  CONNECT_VIEWMODEL,\n  DISCONNECT_VIEWMODEL\n} from './action_types'\n\nimport {\n  connectorMetaMap,\n  aggregateVersionsMap,\n  lastTimestampMap\n} from './constants'\n\nexport const dropKey = (state, key) => {\n  const nextState = { ...state }\n  delete nextState[key]\n\n  return nextState\n}\n\nexport default function createViewModelsReducer(viewModels) {\n  const handlers = {}\n\n  handlers[LOAD_VIEWMODEL_STATE_REQUEST] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [connectorMetaMap]: {\n        ...state[connectorMetaMap],\n        [`${viewModelName}${aggregateIds}${aggregateArgs}`]: {\n          isLoading: true,\n          isFailure: false\n        }\n      },\n      [aggregateVersionsMap]: {\n        ...state[aggregateVersionsMap],\n        [key]: {}\n      },\n      [lastTimestampMap]: {\n        ...state[lastTimestampMap],\n        [key]: +Infinity\n      }\n    }\n  }\n\n  handlers[LOAD_VIEWMODEL_STATE_SUCCESS] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n    const viewModelState = action.result\n    const viewModelTimestamp = action.timestamp\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [viewModelName]: {\n        ...(state[viewModelName] || {}),\n        [aggregateIds]: {\n          ...((state[viewModelName] || {})[aggregateIds] || {}),\n          [aggregateArgs]: viewModelState\n        }\n      },\n      [connectorMetaMap]: {\n        ...state[connectorMetaMap],\n        [key]: {\n          isLoading: false,\n          isFailure: false\n        }\n      },\n      [lastTimestampMap]: {\n        ...state[lastTimestampMap],\n        [key]: viewModelTimestamp\n      }\n    }\n  }\n\n  handlers[LOAD_VIEWMODEL_STATE_FAILURE] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n    const error = action.error\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [connectorMetaMap]: {\n        ...state[connectorMetaMap],\n        [key]: {\n          isLoading: false,\n          isFailure: true,\n          error\n        }\n      }\n    }\n  }\n\n  handlers[DROP_VIEWMODEL_STATE] = (state, action) => {\n    const viewModelName = action.viewModelName\n    const aggregateIds = getHash(action.aggregateIds)\n    const aggregateArgs = getHash(action.aggregateArgs)\n\n    const key = `${viewModelName}${aggregateIds}${aggregateArgs}`\n\n    return {\n      ...state,\n      [viewModelName]: {\n        ...state[viewModelName],\n        [aggregateIds]: dropKey(\n          state[viewModelName][aggregateIds],\n          aggregateArgs\n        )\n      },\n      [connectorMetaMap]: dropKey(state[connectorMetaMap], key),\n      [aggregateVersionsMap]: dropKey(state[aggregateVersionsMap], key),\n      [lastTimestampMap]: dropKey(state[lastTimestampMap], key)\n    }\n  }\n\n  const aggregateHash = new Map()\n\n  handlers[CONNECT_VIEWMODEL] = (state, action) => {\n    if (action.aggregateIds !== '*') {\n      const aggregatesKey = getHash(action.aggregateIds)\n      for (const aggregateId of action.aggregateIds) {\n        if (!aggregateHash.has(aggregateId)) {\n          aggregateHash.set(aggregateId, [])\n        }\n        aggregateHash.get(aggregateId).push(aggregatesKey)\n      }\n    }\n    return state\n  }\n\n  handlers[DISCONNECT_VIEWMODEL] = (state, action) => {\n    if (action.aggregateIds !== '*') {\n      const aggregatesKey = getHash(action.aggregateIds)\n      for (const aggregateId of action.aggregateIds) {\n        const aggregateKeys = aggregateHash.get(aggregateId)\n        const idx = aggregateKeys.indexOf(aggregatesKey)\n        if (idx >= 0) {\n          aggregateKeys.splice(idx, 1)\n        }\n        if (aggregateKeys.length === 0) {\n          aggregateHash.delete(aggregateId)\n        }\n      }\n    }\n    return state\n  }\n\n  const uniqueListeners = new Map()\n\n  for (const viewModel of viewModels) {\n    for (const eventType of Object.keys(viewModel.projection).filter(\n      eventType => eventType !== 'Init'\n    )) {\n      if (!uniqueListeners.has(eventType)) {\n        uniqueListeners.set(eventType, [])\n      }\n      uniqueListeners.get(eventType).push(viewModel)\n    }\n  }\n\n  for (const [eventType, viewModels] of uniqueListeners.entries()) {\n    handlers[eventType] = (state, action) => {\n      for (const viewModel of viewModels) {\n        const handler = viewModel.projection[action.type]\n\n        const aggregateKeys = Array.from(\n          new Set(aggregateHash.get(action.aggregateId))\n        )\n\n        for (const aggregateKey of aggregateKeys) {\n          if (state[viewModel.name] && state[viewModel.name][aggregateKey]) {\n            for (const aggregateArgs of Object.keys(\n              state[viewModel.name][aggregateKey]\n            )) {\n              state[viewModel.name][aggregateKey][aggregateArgs] = handler(\n                state[viewModel.name][aggregateKey][aggregateArgs],\n                action\n              )\n            }\n\n            state[viewModel.name][aggregateKey] = {\n              ...state[viewModel.name][aggregateKey]\n            }\n          }\n        }\n\n        if (state[viewModel.name] && state[viewModel.name]['*']) {\n          for (const aggregateArgs of Object.keys(state[viewModel.name]['*'])) {\n            state[viewModel.name]['*'][aggregateArgs] = handler(\n              state[viewModel.name]['*'][aggregateArgs],\n              action\n            )\n          }\n\n          state[viewModel.name]['*'] = { ...state[viewModel.name]['*'] }\n        }\n\n        state[viewModel.name] = { ...state[viewModel.name] }\n      }\n\n      return { ...state }\n    }\n  }\n\n  let state = {\n    [connectorMetaMap]: {},\n    [aggregateVersionsMap]: {},\n    [lastTimestampMap]: {}\n  }\n\n  return (_, action) => {\n    const eventHandler = handlers[action.type]\n    if (eventHandler) {\n      state = eventHandler(state, action)\n    }\n\n    return state\n  }\n}\n"],"file":"create_view_models_reducer.js"}