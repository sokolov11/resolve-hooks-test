{"version":3,"sources":["../src/connect_view_model_saga.js"],"names":["take","put","delay","getHash","eventListenerSaga","subscribeTopicRequest","loadViewModelStateRequest","CONNECT_VIEWMODEL","DISCONNECT_VIEWMODEL","SUBSCRIBE_TOPIC_SUCCESS","SUBSCRIBE_TOPIC_FAILURE","LOAD_VIEWMODEL_STATE_FAILURE","LOAD_VIEWMODEL_STATE_SUCCESS","HttpError","connectViewModelSaga","sagaArgs","action","viewModels","connectionManager","sagaManager","sagaKey","skipConnectionManager","viewModelName","aggregateIds","aggregateArgs","connectionId","addConnection","connectionName","addedConnections","length","stop","viewModel","find","name","eventTypes","Object","keys","projection","filter","eventType","subscriptionKeys","reduce","acc","Array","isArray","push","map","aggregateId","counter","type","key","topicId","topicName","subscribeResultAction","start","loadViewModelStateResultAction","error","console","warn"],"mappings":"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","sourcesContent":["import { take, put, delay } from 'redux-saga/effects'\n\nimport getHash from './get_hash'\nimport eventListenerSaga from './event_listener_saga'\nimport { subscribeTopicRequest, loadViewModelStateRequest } from './actions'\nimport {\n  CONNECT_VIEWMODEL,\n  DISCONNECT_VIEWMODEL,\n  SUBSCRIBE_TOPIC_SUCCESS,\n  SUBSCRIBE_TOPIC_FAILURE,\n  LOAD_VIEWMODEL_STATE_FAILURE,\n  LOAD_VIEWMODEL_STATE_SUCCESS\n} from './action_types'\nimport { HttpError } from './create_api'\n\n/*\n  Saga is launched on action `CONNECT_VIEWMODEL`, emitted by view model connector.\n  If view model with supposed options had already been fetched, do nothing.\n  Saga performs view model state fetching and subscribe to topics Array<{aggregateId, eventType}>\n  If launches `event_listener_saga`.\n  Saga ends when view model state is fetched and all necessary topics are acknowledged.\n  View model state is fetched by `load_view_model_state_saga`, interaction\n  performs through following actions: `LOAD_VIEWMODEL_STATE_REQUEST`,\n  `LOAD_VIEWMODEL_STATE_SUCCESS` and `LOAD_VIEWMODEL_STATE_FAILURE`.\n  Subscription to necessary topics are performed by `subscribe_saga`, interaction\n  performs by following actions: `SUBSCRIBE_TOPIC_REQUEST`,\n  `SUBSCRIBE_TOPIC_SUCCESS` and `SUBSCRIBE_TOPIC_FAILURE`.\n*/\n\nconst connectViewModelSaga = function*(sagaArgs, action) {\n  const {\n    viewModels,\n    connectionManager,\n    sagaManager,\n    sagaKey,\n    skipConnectionManager\n  } = sagaArgs\n  const { viewModelName, aggregateIds, aggregateArgs } = action\n\n  const connectionId = `${getHash(action.aggregateIds)}${getHash(\n    action.aggregateArgs\n  )}`\n\n  if (!skipConnectionManager) {\n    const { addedConnections } = connectionManager.addConnection({\n      connectionName: viewModelName,\n      connectionId\n    })\n\n    if (addedConnections.length !== 1) {\n      return\n    }\n  }\n\n  yield* sagaManager.stop(`${DISCONNECT_VIEWMODEL}${sagaKey}`)\n\n  const viewModel = viewModels.find(({ name }) => name === viewModelName)\n\n  const eventTypes = Object.keys(viewModel.projection).filter(\n    eventType => eventType !== 'Init'\n  )\n\n  // viewModelName + aggregateIds => Array<{ aggregateId, eventType }>\n  let subscriptionKeys = eventTypes.reduce((acc, eventType) => {\n    if (Array.isArray(aggregateIds)) {\n      acc.push(...aggregateIds.map(aggregateId => ({ aggregateId, eventType })))\n    } else if (aggregateIds === '*') {\n      acc.push({ aggregateId: '*', eventType })\n    }\n    return acc\n  }, [])\n\n  while (subscriptionKeys.length > 0) {\n    let counter = subscriptionKeys.length\n    for (const { aggregateId, eventType } of subscriptionKeys) {\n      yield put(subscribeTopicRequest(eventType, aggregateId))\n    }\n\n    while (counter > 0) {\n      // eslint-disable-next-line no-loop-func\n      const subscribeResultAction = yield take(action => {\n        return (\n          (action.type === SUBSCRIBE_TOPIC_SUCCESS ||\n            action.type === SUBSCRIBE_TOPIC_FAILURE) &&\n          subscriptionKeys.find(\n            key =>\n              key.aggregateId === action.topicId &&\n              key.eventType === action.topicName\n          )\n        )\n      })\n\n      if (subscribeResultAction.type === SUBSCRIBE_TOPIC_SUCCESS) {\n        subscriptionKeys = subscriptionKeys.filter(\n          key =>\n            !(\n              key.aggregateId === subscribeResultAction.topicId &&\n              key.eventType === subscribeResultAction.topicName\n            )\n        )\n      }\n\n      counter--\n    }\n  }\n\n  yield* sagaManager.start(\n    `${CONNECT_VIEWMODEL}${sagaKey}`,\n    eventListenerSaga,\n    {\n      ...sagaArgs,\n      eventTypes\n    },\n    action\n  )\n\n  while (true) {\n    yield put(\n      loadViewModelStateRequest(viewModelName, aggregateIds, aggregateArgs)\n    )\n\n    const loadViewModelStateResultAction = yield take(\n      action =>\n        (action.type === LOAD_VIEWMODEL_STATE_SUCCESS ||\n          action.type === LOAD_VIEWMODEL_STATE_FAILURE) &&\n        action.viewModelName === viewModelName &&\n        `${getHash(action.aggregateIds)}${getHash(action.aggregateArgs)}` ===\n          connectionId\n    )\n\n    if (loadViewModelStateResultAction.type === LOAD_VIEWMODEL_STATE_SUCCESS) {\n      break\n    }\n\n    if (\n      loadViewModelStateResultAction.type === LOAD_VIEWMODEL_STATE_FAILURE &&\n      loadViewModelStateResultAction.error instanceof HttpError\n    ) {\n      // eslint-disable-next-line no-console\n      console.warn('Http error: ', loadViewModelStateResultAction.error)\n      return\n    }\n\n    yield delay(500)\n  }\n}\n\nexport default connectViewModelSaga\n"],"file":"connect_view_model_saga.js"}