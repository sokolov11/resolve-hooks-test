{"version":3,"sources":["../src/create_connection_manager.js"],"names":["getAddedConnections","prevConnections","nextConnections","filter","connection","find","connectionName","connectionId","getRemovedConnections","getConnections","connections","wildcardSymbol","result","connectionsByName","push","apply","addConnection","pool","Object","create","addedConnections","removedConnections","removeConnection","keys","length","createConnectionManager","bind"],"mappings":"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","sourcesContent":["const getAddedConnections = (prevConnections, nextConnections) =>\n  nextConnections.filter(\n    connection =>\n      !prevConnections.find(\n        ({ connectionName, connectionId }) =>\n          connection.connectionName === connectionName &&\n          connection.connectionId === connectionId\n      )\n  )\n\nconst getRemovedConnections = (prevConnections, nextConnections) =>\n  prevConnections.filter(\n    connection =>\n      !nextConnections.find(\n        ({ connectionName, connectionId }) =>\n          connection.connectionName === connectionName &&\n          connection.connectionId === connectionId\n      )\n  )\n\nconst getConnections = ({ connections, wildcardSymbol }) => {\n  const result = []\n  for (const connectionName in connections) {\n    let connectionsByName = []\n    for (const connectionId in connections[connectionName]) {\n      if (connectionId === wildcardSymbol) {\n        connectionsByName = [\n          {\n            connectionName,\n            connectionId\n          }\n        ]\n        break\n      }\n      connectionsByName.push({\n        connectionName,\n        connectionId\n      })\n    }\n    result.push.apply(result, connectionsByName)\n  }\n\n  return result\n}\n\nconst addConnection = (pool, { connectionName, connectionId }) => {\n  const prevConnections = getConnections(pool)\n\n  if (!pool.connections[connectionName]) {\n    pool.connections[connectionName] = Object.create(null)\n  }\n  if (!pool.connections[connectionName][connectionId]) {\n    pool.connections[connectionName][connectionId] = 0\n  }\n  pool.connections[connectionName][connectionId]++\n\n  const nextConnections = getConnections(pool)\n\n  const addedConnections = getAddedConnections(prevConnections, nextConnections)\n  const removedConnections = getRemovedConnections(\n    prevConnections,\n    nextConnections\n  )\n\n  return { addedConnections, removedConnections }\n}\n\nconst removeConnection = (pool, { connectionName, connectionId }) => {\n  const prevConnections = getConnections(pool)\n\n  pool.connections[connectionName][connectionId]--\n\n  if (!pool.connections[connectionName][connectionId]) {\n    delete pool.connections[connectionName][connectionId]\n  }\n\n  if (Object.keys(pool.connections[connectionName]).length === 0) {\n    delete pool.connections[connectionName]\n  }\n\n  const nextConnections = getConnections(pool)\n\n  const addedConnections = getAddedConnections(prevConnections, nextConnections)\n  const removedConnections = getRemovedConnections(\n    prevConnections,\n    nextConnections\n  )\n\n  return { addedConnections, removedConnections }\n}\n\nconst createConnectionManager = ({ wildcardSymbol = '*' } = {}) => {\n  const pool = {\n    connections: Object.create(null),\n    wildcardSymbol\n  }\n\n  return {\n    addConnection: addConnection.bind(null, pool),\n    removeConnection: removeConnection.bind(null, pool),\n    getConnections: getConnections.bind(null, pool)\n  }\n}\n\nexport default createConnectionManager\n"],"file":"create_connection_manager.js"}