{"version":3,"sources":["../src/connect_read_model_saga.js"],"names":["take","put","delay","hash","getHash","loadReadModelStateRequest","DISCONNECT_READMODEL","LOAD_READMODEL_STATE_FAILURE","LOAD_READMODEL_STATE_SUCCESS","HttpError","connectReadModelSaga","sagaArgs","action","connectionManager","sagaManager","sagaKey","queryIdMap","sessionId","readModelName","resolverName","resolverArgs","skipConnectionManager","addConnection","connectionName","connectionId","addedConnections","length","stop","key","has","set","get","queryId","type","loadReadModelStateResultAction","error","console","warn"],"mappings":"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","sourcesContent":["import { take, put, delay } from 'redux-saga/effects'\nimport hash from 'uuid'\n\nimport getHash from './get_hash'\nimport { loadReadModelStateRequest } from './actions'\nimport {\n  DISCONNECT_READMODEL,\n  LOAD_READMODEL_STATE_FAILURE,\n  LOAD_READMODEL_STATE_SUCCESS\n} from './action_types'\n\nimport { HttpError } from './create_api'\n\n/*\n  Saga is launched on action `CONNECT_READMODEL`, emitted by read model connector.\n  If read model with supposed options had already been fetched, do nothing.\n  Saga performs resolver result fetching and subscribes to diff topic.\n  Resolver result is fetched by `load_read_model_state_saga`, interaction\n  performs through following actions: `LOAD_READMODEL_STATE_REQUEST`,\n  `LOAD_READMODEL_STATE_SUCCESS` and `LOAD_READMODEL_STATE_FAILURE`.\n*/\n\nconst connectReadModelSaga = function*(sagaArgs, action) {\n  const {\n    connectionManager,\n    sagaManager,\n    sagaKey,\n    queryIdMap,\n    sessionId\n  } = sagaArgs\n  const {\n    readModelName,\n    resolverName,\n    resolverArgs,\n    skipConnectionManager\n  } = action\n\n  if (!skipConnectionManager) {\n    const { addedConnections } = connectionManager.addConnection({\n      connectionName: readModelName,\n      connectionId: `${getHash(action.resolverName)}${getHash(\n        action.resolverArgs\n      )}`\n    })\n\n    if (addedConnections.length !== 1) {\n      return\n    }\n  }\n\n  yield* sagaManager.stop(`${DISCONNECT_READMODEL}${sagaKey}`)\n\n  const key = `${readModelName}${getHash(action.resolverName)}${getHash(\n    action.resolverArgs\n  )}`\n  if (!queryIdMap.has(key)) {\n    queryIdMap.set(key, 0)\n  }\n  queryIdMap.set(key, queryIdMap.get(key) + 1)\n\n  const queryId = hash(\n    `${key}${queryIdMap.get(key)}${sessionId}`,\n    '00000000-0000-0000-0000-000000000000'\n  )\n\n  while (true) {\n    yield put(\n      loadReadModelStateRequest(\n        readModelName,\n        resolverName,\n        resolverArgs,\n        queryId\n      )\n    )\n\n    const loadReadModelStateResultAction = yield take(\n      action =>\n        (action.type === LOAD_READMODEL_STATE_SUCCESS ||\n          action.type === LOAD_READMODEL_STATE_FAILURE) &&\n        action.queryId === queryId\n    )\n\n    if (loadReadModelStateResultAction.type === LOAD_READMODEL_STATE_SUCCESS) {\n      break\n    }\n\n    if (\n      loadReadModelStateResultAction.type === LOAD_READMODEL_STATE_FAILURE &&\n      loadReadModelStateResultAction.error instanceof HttpError\n    ) {\n      // eslint-disable-next-line no-console\n      console.warn('Http error: ', loadReadModelStateResultAction.error)\n      return\n    }\n\n    yield delay(500)\n  }\n}\n\nexport default connectReadModelSaga\n"],"file":"connect_read_model_saga.js"}