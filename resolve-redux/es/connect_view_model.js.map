{"version":3,"sources":["../src/connect_view_model.js"],"names":["React","connect","bindActionCreators","hoistNonReactStatic","actions","connectorMetaMap","getHash","connectResolveAdvanced","mapDispatchToConnectorProps","dispatch","connectViewModel","disconnectViewModel","mapStateToConnectorProps","mapStateToOptions","state","ownProps","connectorOptions","hasOwnProperty","aggregateArgs","Array","isArray","aggregateIds","indexOf","Error","viewModelName","connectorMeta","viewModels","isLoading","isFailure","data","error","Component","ViewModelContainer","componentDidMount","props","componentWillUnmount","componentDidUpdate","prevProps","prevConnectorOptions","render","PureComponent","ViewModelConnector","bind"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport hoistNonReactStatic from 'hoist-non-react-statics'\n\nimport * as actions from './actions'\nimport { connectorMetaMap } from './constants'\nimport getHash from './get_hash'\nimport connectResolveAdvanced from './connect_resolve_advanced'\n\nexport const mapDispatchToConnectorProps = dispatch =>\n  bindActionCreators(\n    {\n      connectViewModel: actions.connectViewModel,\n      disconnectViewModel: actions.disconnectViewModel\n    },\n    dispatch\n  )\n\nexport const mapStateToConnectorProps = (\n  mapStateToOptions,\n  state,\n  ownProps\n) => {\n  const connectorOptions = mapStateToOptions(state, ownProps)\n  if (!connectorOptions.hasOwnProperty('aggregateArgs')) {\n    connectorOptions.aggregateArgs = {}\n  }\n  if (\n    Array.isArray(connectorOptions.aggregateIds) &&\n    connectorOptions.aggregateIds.indexOf('*') !== -1\n  ) {\n    throw new Error(\n      `Incorrect value of \"aggregateIds\". Maybe you meant to use \"*\", not [\"*\"]`\n    )\n  }\n\n  const viewModelName = connectorOptions.viewModelName\n  const aggregateIds = getHash(connectorOptions.aggregateIds)\n  const aggregateArgs = getHash(connectorOptions.aggregateArgs)\n\n  const connectorMeta =\n    state.viewModels &&\n    state.viewModels[connectorMetaMap] &&\n    state.viewModels[connectorMetaMap][\n      `${viewModelName}${aggregateIds}${aggregateArgs}`\n    ]\n      ? state.viewModels[connectorMetaMap][\n          `${viewModelName}${aggregateIds}${aggregateArgs}`\n        ]\n      : {}\n\n  const { isLoading, isFailure } = connectorMeta\n\n  const data =\n    isLoading === false && isFailure === false\n      ? state.viewModels[viewModelName][aggregateIds][aggregateArgs]\n      : null\n\n  const error =\n    isLoading === false && isFailure === true ? connectorMeta.error : null\n\n  return {\n    ownProps,\n    connectorOptions,\n    isLoading,\n    isFailure,\n    data,\n    error\n  }\n}\n\nconst connectViewModel = mapStateToOptions => Component => {\n  class ViewModelContainer extends React.PureComponent {\n    componentDidMount() {\n      const {\n        viewModelName,\n        aggregateIds,\n        aggregateArgs\n        // placeholder,\n        // placeholderTimeout\n      } = this.props.connectorOptions\n\n      this.props.connectViewModel(viewModelName, aggregateIds, aggregateArgs)\n    }\n\n    componentWillUnmount() {\n      const {\n        viewModelName,\n        aggregateIds,\n        aggregateArgs\n        // placeholder,\n        // placeholderTimeout\n      } = this.props.connectorOptions\n\n      this.props.disconnectViewModel(viewModelName, aggregateIds, aggregateArgs)\n    }\n\n    componentDidUpdate(prevProps) {\n      const connectorOptions = this.props.connectorOptions\n      const prevConnectorOptions = prevProps.connectorOptions\n      if (\n        connectorOptions &&\n        prevConnectorOptions &&\n        (prevConnectorOptions.viewModelName !==\n          connectorOptions.viewModelName ||\n          prevConnectorOptions.aggregateIds !== connectorOptions.aggregateIds ||\n          prevConnectorOptions.aggregateArgs !==\n            connectorOptions.aggregateArgs) &&\n        (prevConnectorOptions.viewModelName !==\n          connectorOptions.viewModelName ||\n          getHash(prevConnectorOptions.aggregateIds) !==\n            getHash(connectorOptions.aggregateIds) ||\n          getHash(prevConnectorOptions.aggregateArgs) !==\n            getHash(connectorOptions.aggregateArgs))\n      ) {\n        this.props.disconnectViewModel(\n          prevConnectorOptions.viewModelName,\n          prevConnectorOptions.aggregateIds,\n          prevConnectorOptions.aggregateArgs\n        )\n        this.props.connectViewModel(\n          connectorOptions.viewModelName,\n          connectorOptions.aggregateIds,\n          connectorOptions.aggregateArgs\n        )\n      }\n    }\n\n    render() {\n      const { ownProps, isLoading, data } = this.props\n      return <Component {...ownProps} isLoading={isLoading} data={data} />\n    }\n  }\n\n  const ViewModelConnector = connect(\n    mapStateToConnectorProps.bind(null, mapStateToOptions),\n    mapDispatchToConnectorProps\n  )(ViewModelContainer)\n  ViewModelConnector.mapStateToOptions = mapStateToOptions\n\n  hoistNonReactStatic(ViewModelConnector, ViewModelContainer)\n\n  return connectResolveAdvanced(ViewModelConnector)\n}\n\nexport default connectViewModel\n"],"file":"connect_view_model.js"}